const isFunction = f => typeof f === 'function'

module.exports = function () {
  const middlewares = []

  function use(path, method, handler) {
    if (isFunction(path)) middlewares.push({ handler: path })
    else if (isFunction(method)) middlewares.push({ path, handler: method })
    else middlewares.push({ path, method, handler })
  }

  function exec(req, res, callback) {
    let { url, method } = req
    if (middlewares.length) {
      // copy一份 , 避免处理器中添加中间件 , 导致程序异常
      let i = 0
      let count = middlewares.length
      let _middlewares = middlewares.slice(0)

      !(function handle(middleware) {
        function next(err) {
          if (i >= count || err || err === null) {
            // err = null , 表示处理器完毕
            callback && callback(err)
          } else {
            handle(_middlewares[++i])
          }
        }

        // path不相等 跳过处理器
        if (middleware.path && middleware.path != url) {
          handle(_middlewares[++i])
          return
        }

        // method不想等 , 跳过处理器
        if (middleware.method && middleware.method != method) {
          handle(_middlewares[++i])
          return
        }

        if (middleware.handler.length <= 2) {
          // 没有next, 则不用进入下一个处理器 , 直接退出
          middleware.handler(req, res)
          return
        } else {
          middleware.handler(req, res, next)
        }
      })(_middlewares[i])
    }
  }

  return { use, exec }
}()


